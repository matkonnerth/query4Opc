 @0   0..83  statement                body=@1
 @1   0..83  > query                  clauses=[@
                                      2, @16]
 @2   0..73  > > MATCH                pattern=@3
 @3   6..72  > > > pattern            paths=[@4]				
 @4   6..72  > > > > pattern path     (@5)-[@8]-						
                                      (@10)
 @5   6..18  > > > > > node pattern   (@6:@7)							
 @6   7..10  > > > > > > identifier   `obj`
 @7  10..17  > > > > > > label        :`Object`							
 @8  18..41  > > > > > rel pattern    -[:@9]->							
 @9  20..38  > > > > > > rel type     :`HasTypeD						
                                      efinition`
@10  41..72  > > > > > node pattern   (@11:@12 {						
                                      @13})
@11  42..43  > > > > > > identifier   `t`
@12  43..54  > > > > > > label        :`ObjectTy
                                      pe`
@13  54..71  > > > > > > map          {@14:@15}
@14  55..61  > > > > > > > prop name  `NodeId`
@15  62..70  > > > > > > > string     "MyType"
@16  73..83  > > RETURN               projection
                                      s=[@17]
@17  80..83  > > > projection         expression
                                      =@18
@18  80..83  > > > > identifier       `obj`



pattern path umformen auf traversal strategy

Aus

(obj:Object)-[:HasTypeDefinition]->(t:ObjectType{NodeId:"MyType"}) 

muss abgeleitet werden:


Jedes Object im Adressraum besuchen, Abfrage ob Referenz mit HasTypeDefinition auf ObjectType mit NodeId "MyType"

HierachicalVisit(Start wird nicht gesetzt, wird implizit auf ObjectsFolder gesetzt?)

--------------------------------------------------------------------------------------------------------------------
Get an ObjectNode with a certain NodeId

Naive implementation:
traverse all nodes and check NodeId Attribute

Optimization would be to simple get the node and return

 @0   0..48  statement                body=@1
 @1   0..48  > query                  clauses=[@
                                      2, @11]
 @2   0..38  > > MATCH                pattern=@3
 @3   6..37  > > > pattern            paths=[@4]
 @4   6..37  > > > > pattern path     (@5)
 @5   6..37  > > > > > node pattern   (@6:@7 {@8
                                      })
 @6   7..10  > > > > > > identifier   `obj`
 @7  10..17  > > > > > > label        :`Object`
 @8  17..36  > > > > > > map          {@9:@10}
 @9  18..24  > > > > > > > prop name  `NodeId`
@10  25..35  > > > > > > > string     "MyObject"
@11  38..48  > > RETURN               projection
                                      s=[@12]
@12  45..48  > > > projection         expression
                                      =@13
@13  45..48  > > > > identifier       `obj`





